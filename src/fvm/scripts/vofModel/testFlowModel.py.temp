#!/usr/bin/env python
import pdb
import sys
sys.setdlopenflags(0x100|0x2)
import numpy as np

import fvm.fvmbaseExt as fvmbaseExt
import fvm.importers as importers

atype = 'double'
#atype = 'tangent'

if atype == 'double':
    import fvm.models_atyped_double as models
    import fvm.exporters_atyped_double as exporters
elif atype == 'tangent':
    import fvm.models_atyped_tangent_double as models
    import fvm.exporters_atyped_tangent_double as exporters


from FluentCase import FluentCase

#fvmbaseExt.enableDebug("cdtor")

fileBase = None
numIterations = 10
#fileBase = "/home/sm/app-memosa/src/fvm/test/cav32"
#fileBase = "/home/sm/a/data/wj"

def usage():
    print "Usage: %s filebase [outfilename]" % sys.argv[0]
    print "Where filebase.cas is a Fluent case file."
    print "Output will be in filebase-prism.dat if it is not specified."
    sys.exit(1)

def advance(fmodel,niter):
    for i in range(0,niter):
        try:
            fmodel.advance(1)
        except KeyboardInterrupt:
            break

# change as needed

outfile = None
if __name__ == '__main__' and fileBase is None:
    if len(sys.argv) < 2:
        usage()
    fileBase = sys.argv[1]
    if len(sys.argv) == 3:
        outfile = sys.argv[2]

if outfile == None:
    outfile = fileBase+"-prism.dat"
    
reader = FluentCase(fileBase+".cas")

#import debug
reader.read();

meshes = reader.getMeshList()

import time
t0 = time.time()

geomFields =  models.GeomFields('geom')
metricsCalculator = models.MeshMetricsCalculatorA(geomFields,meshes)

metricsCalculator.init()

if atype == 'tangent':
    metricsCalculator.setTangentCoords(0,7,1)

flowFields =  models.FlowFields('flow')
fmodel = models.FlowModelA(geomFields,flowFields,meshes)

thermalFields = models.ThermalFields('temperature')
tmodel = models.ThermalModelA(geomFields,thermalFields,meshes)

reader.importFlowBCs(fmodel,meshes)
bcMap = fmodel.getBCMap()
bcMapTherm = tmodel.getBCMap()
bcMapTherm[7].bcType = 'Symmetry'
for i in [5,6,8,9,10]:
    bc = bcMap[i]
    bc.bcType = 'Symmetry'
    bcMapTherm.bcType = 'Symmetry'
    #bc.bcType = 'NoSlipWall'
fmodel.printBCs()
tmodel.printBCs()

vcmap = tmodel.getVCMap()
vcZone = vcmap[meshes[0].getID()]
vcZone['thermalConductivity'] = 1.0E-12
vcZone['density'] = 1.0
vcZone['specificHeat'] = 1.0

momSolver = fvmbaseExt.AMG()
momSolver.relativeTolerance = 1e-1
momSolver.nMaxIterations = 20
momSolver.maxCoarseLevels=20
momSolver.verbosity=0

contSolver = fvmbaseExt.AMG()
#pc = fvmbaseExt.AMG()
#pc.verbosity=0
#contSolver = fvmbaseExt.BCGStab()
#contSolver.preconditioner = pc
contSolver.relativeTolerance = 1e-1
contSolver.nMaxIterations = 20
contSolver.verbosity=0
contSolver.maxCoarseLevels=20

#tempSolver = fvmbaseExt.AMG()
#tempSolver.relativeTolerance = 1e-1
#tempSolver.nMaxIterations = 20
#tempSolver.maxCoarseLevels=20
#tempSolver.verbosity=0
pc = fvmbaseExt.AMG()
pc.verbosity = 0
tempSolver = fvmbaseExt.BCGStab()
tempSolver.preconditioner = pc
tempSolver.relativeTolerance = 1.e-6
tempSolver.absoluteTolerance = 1.e-6
tempSolver.nMaxIteractions = 100
tempSolver.verbosity = 0

foptions = fmodel.getOptions()
toptions = tmodel.getOptions()

foptions.momentumLinearSolver = momSolver
foptions.pressureLinearSolver = contSolver
toptions.linearSolver = tempSolver

foptions.momentumTolerance=1e-3
foptions.continuityTolerance=1e-3
foptions.setVar("momentumURF",0.7)
foptions.setVar("pressureURF",0.3)
foptions.printNormalizedResiduals= True
foptions.transient = True
foptions.setVar("timeStep",0.01)

toptions.relativeTolerance=1e-4
toptions.setVar("initialTemperature",0.0)
toptions.enthalpyModel = False
toptions.polynomialCp = False
toptions.transient = True
toptions.setVar("timeStep",0.01)

"""
if atype=='tangent':
    vcMap = fmodel.getVCMap()
    for i,vc in vcMap.iteritems():
        print vc.getVar('viscosity')
        vc.setVar('viscosity',(1.7894e-5,1))
"""
numTimeSteps = 0
fmodel.init()
tmodel.init()

rhoH20 = 1000.0
rhoAir = 1.2

muH20 = 8.94E-4
muAir = 1.8E-4

mesh = meshes[0]
cells = mesh.getCells()
ncells = cells.getSelfCount()

vof = thermalFields.temperature[cells].asNumPyArray()
rho = flowFields.density[cells].asNumPyArray()
mu = flowFields.viscosity[cells].asNumPyArray()

CellCoord = geomFields.coordinate[cells].asNumPyArray()

for c in range(ncells):
    x = CellCoord[c,0]
    if x <= 0.02:
        vof[c] = 1.0
    rho[c] = vof[c]*rhoH20 + (1.0-vof[c])*rhoAir
    mu[c] = vof[c]*muH20 + (1.0-vof[c])*muAir

faces = mesh.getFaces()
faceCells = mesh.getAllFaceCells()
nFaces = faces.getCount()
faceArea = geomFields.area[faces].asNumPyArray()
V = flowFields.velocity[cells].asNumPyArray()
flux = thermalFields.convectionFlux[faces].asNumPyArray()

writer = exporters.VTKWriterA(geomFields,meshes,"flow-" + str(numTimeSteps) + ".vtk",
                              "FlowField",False,0)
writer.init()
writer.writeScalarField(flowFields.pressure,"Pressure")
writer.writeScalarField(thermalFields.temperature, "VOF")
writer.writeScalarField(flowFields.density,"Density")
writer.writeScalarField(flowFields.viscosity,"Viscosity")
writer.writeVectorField(flowFields.velocity,"Velocity")
writer.finish()


pdb.set_trace()
while (numTimeSteps < 10):
    for j in range(50):
        #solve for flow field
        fmodel.advance(1)
        #update convective fluxes in VOF model
        for f in range(nFaces):
            c0 = faceCells(f,0)
            c1 = faceCells(f,1)
            flux = 0.5*(np.dot(V[c0,:],faceArea[f,:]) +
                        np.dot(V[c1,:],faceArea[f,:]))
        #solve for VOF field
        tmodel.advance(1)
        #update density and viscosity
        for c in range(ncells):
            rho[c] = vof[c]*rhoH20 + (1.0-vof[c])*rhoAir
            mu[c] = vof[c]*muH20 + (1.0-vof[c])*muAir

    fmodel.updateTime()
    tmodel.updateTime()
    numTimeSteps = numTimeSteps + 1
    writer = exporters.VTKWriterA(geomFields,meshes,"flow-" + str(numTimeSteps) + ".vtk",
                              "FlowField",False,0)
    writer.init()
    writer.writeScalarField(flowFields.pressure,"Pressure")
    writer.writeScalarField(thermalFields.temperature, "VOF")
    writer.writeScalarField(flowFields.density,"Density")
    writer.writeScalarField(flowFields.viscosity,"Viscosity")
    writer.writeVectorField(flowFields.velocity,"Velocity")
    writer.finish()

t1 = time.time()
if outfile != '/dev/stdout':
    print '\nsolution time = %f' % (t1-t0)

if (atype=='tangent'):
    writer = exporters.FluentDataExporterA(reader,fileBase+"-prism-tangent.dat",False,1)
    writer.init()
    writer.writeScalarField(flowFields.pressure,1)
    writer.writeVectorField(flowFields.velocity,111)
    writer.writeScalarField(flowFields.massFlux,18)
    writer.finish()

    
